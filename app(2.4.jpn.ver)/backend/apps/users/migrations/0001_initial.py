# Generated by Django 4.2.7 on 2025-10-24 02:35

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Email Address"
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date of Birth"
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="profile_pictures/",
                        verbose_name="Profile Picture",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "ordering": ["-created_at"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                        ],
                        max_length=10,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Height in centimeters",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(300),
                        ],
                        verbose_name="Height (cm)",
                    ),
                ),
                (
                    "current_weight",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Current weight in kilograms",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name="Current Weight (kg)",
                    ),
                ),
                (
                    "target_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Target weight in kilograms",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name="Target Weight (kg)",
                    ),
                ),
                (
                    "activity_level",
                    models.CharField(
                        choices=[
                            ("sedentary", "Sedentary (little or no exercise)"),
                            ("light", "Lightly Active (light exercise 1-3 days/week)"),
                            (
                                "moderate",
                                "Moderately Active (moderate exercise 3-5 days/week)",
                            ),
                            ("very", "Very Active (hard exercise 6-7 days/week)"),
                            (
                                "extra",
                                "Extra Active (very hard exercise, physical job)",
                            ),
                        ],
                        default="moderate",
                        max_length=20,
                        verbose_name="Activity Level",
                    ),
                ),
                (
                    "fitness_goal",
                    models.CharField(
                        choices=[
                            ("weight_loss", "Weight Loss"),
                            ("muscle_gain", "Muscle Gain"),
                            ("maintenance", "Maintenance"),
                            ("endurance", "Endurance"),
                            ("flexibility", "Flexibility"),
                            ("general_fitness", "General Fitness"),
                        ],
                        default="general_fitness",
                        max_length=20,
                        verbose_name="Fitness Goal",
                    ),
                ),
                (
                    "body_fat_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(60),
                        ],
                        verbose_name="Body Fat Percentage",
                    ),
                ),
                (
                    "chest",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="Chest (cm)",
                    ),
                ),
                (
                    "waist",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="Waist (cm)",
                    ),
                ),
                (
                    "hips",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="Hips (cm)",
                    ),
                ),
                (
                    "arms",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="Arms (cm)",
                    ),
                ),
                (
                    "thighs",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="Thighs (cm)",
                    ),
                ),
                (
                    "calves",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="Calves (cm)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
            },
        ),
        migrations.CreateModel(
            name="FoodPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "diet_type",
                    models.CharField(
                        choices=[
                            ("omnivore", "Omnivore"),
                            ("vegetarian", "Vegetarian"),
                            ("vegan", "Vegan"),
                            ("pescatarian", "Pescatarian"),
                            ("keto", "Ketogenic"),
                            ("paleo", "Paleo"),
                            ("mediterranean", "Mediterranean"),
                        ],
                        default="omnivore",
                        max_length=20,
                        verbose_name="Diet Type",
                    ),
                ),
                (
                    "allergies",
                    models.TextField(
                        blank=True,
                        help_text="List any food allergies (comma-separated)",
                        verbose_name="Allergies",
                    ),
                ),
                (
                    "dislikes",
                    models.TextField(
                        blank=True,
                        help_text="Foods you dislike (comma-separated)",
                        verbose_name="Dislikes",
                    ),
                ),
                (
                    "preferred_foods",
                    models.TextField(
                        blank=True,
                        help_text="Your favorite foods (comma-separated)",
                        verbose_name="Preferred Foods",
                    ),
                ),
                (
                    "avoid_ingredients",
                    models.TextField(
                        blank=True,
                        help_text="Ingredients to avoid (comma-separated)",
                        verbose_name="Avoid Ingredients",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="food_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Food Preference",
                "verbose_name_plural": "Food Preferences",
            },
        ),
    ]
